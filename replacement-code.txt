// 替换1：修改"在当前位置插入八字信息"命令
// 查找以下代码：
// 添加命令：在当前位置插入八字信息
this.addCommand({
    id: 'insert-bazi-at-cursor',
    name: '在当前位置插入八字信息',
    editorCallback: (editor: Editor, view: MarkdownView) => {
        this.openDatePickerModal((baziInfo) => {
            if (this.settings.useInteractiveView) {
                // 使用交互式视图 - 插入bazi代码块
                const dateStr = `${baziInfo.solarDate} ${baziInfo.solarTime}`;

                // 在光标位置插入bazi代码块
                editor.replaceSelection(`\`\`\`bazi
date: ${dateStr}
\`\`\``);

                // 显示通知
                new Notice('八字命盘已插入');
            }
        });
    }
});

// 替换为以下代码：
// 添加命令：在当前位置插入八字信息
this.addCommand({
    id: 'insert-bazi-at-cursor',
    name: '在当前位置插入八字信息',
    editorCallback: (editor: Editor) => {
        this.openDatePickerModal((baziInfo) => {
            // 获取日期字符串
            const dateStr = `${baziInfo.solarDate} ${baziInfo.solarTime}`;
            
            // 构建代码块内容
            let codeBlockContent = `\`\`\`bazi\ndate: ${dateStr}\n`;
            
            // 添加性别参数
            if (baziInfo.gender) {
                const genderLabel = baziInfo.gender === '1' ? '男' : '女';
                codeBlockContent += `gender: ${genderLabel}\n`;
            }
            
            // 完成代码块
            codeBlockContent += `\`\`\``;
            
            // 在光标位置插入bazi代码块
            editor.replaceSelection(codeBlockContent);

            // 显示通知
            new Notice('八字命盘已插入');
        });
    }
});

// 替换2：删除"插入交互式八字命盘"命令
// 查找以下代码并删除：
// 添加命令：插入交互式八字命盘
this.addCommand({
    id: 'insert-interactive-bazi',
    name: '插入交互式八字命盘',
    editorCallback: (editor: Editor) => {
        this.openDatePickerModal((baziInfo) => {
            const dateStr = `${baziInfo.solarDate} ${baziInfo.solarTime}`;

            // 在光标位置插入bazi代码块
            editor.replaceSelection(`\`\`\`bazi
date: ${dateStr}
\`\`\``);

            // 显示通知
            new Notice('八字命盘已插入');
        });
    }
});

// 替换3：修改"解析选中的八字"命令
// 查找以下代码：
// 添加命令：解析选中的八字
this.addCommand({
    id: 'parse-selected-bazi',
    name: '解析选中的八字',
    editorCallback: (editor: Editor, view: MarkdownView) => {
        const selection = editor.getSelection();
        if (selection) {
            this.openBaziParserModal(selection, (baziInfo) => {
                // 生成八字信息的HTML
                const id = 'bazi-view-' + Math.random().toString(36).substring(2, 9);
                const html = BaziService.generateBaziHTML(baziInfo as any, id);

                // 替换选中的文本为代码块
                const dateStr = `${baziInfo.solarDate} ${baziInfo.solarTime}`;
                editor.replaceSelection(`\`\`\`bazi
date: ${dateStr}
\`\`\``);
            });
        } else {
            new Notice('请先选择八字文本');
        }
    }
});

// 替换为以下代码：
// 添加命令：解析选中的八字
this.addCommand({
    id: 'parse-selected-bazi',
    name: '解析选中的八字',
    editorCallback: (editor: Editor) => {
        const selection = editor.getSelection();
        if (selection) {
            // 清理选中的文本，去除多余的空格
            const cleanedBazi = selection.replace(/\s+/g, ' ').trim();
            
            // 检查是否符合八字格式（四个天干地支组合，用空格分隔）
            const baziPattern = /^([甲乙丙丁戊己庚辛壬癸][子丑寅卯辰巳午未申酉戌亥])\s+([甲乙丙丁戊己庚辛壬癸][子丑寅卯辰巳午未申酉戌亥])\s+([甲乙丙丁戊己庚辛壬癸][子丑寅卯辰巳午未申酉戌亥])\s+([甲乙丙丁戊己庚辛壬癸][子丑寅卯辰巳午未申酉戌亥])$/;
            
            if (baziPattern.test(cleanedBazi)) {
                // 直接解析八字，获取可能的年份
                try {
                    const baziInfo = BaziService.parseBaziString(cleanedBazi);
                    
                    // 构建代码块内容
                    let codeBlockContent = `\`\`\`bazi\nbazi: ${cleanedBazi}\n`;
                    
                    // 如果有匹配的年份，添加第一个匹配的年份
                    if (baziInfo.matchingYears && baziInfo.matchingYears.length > 0) {
                        codeBlockContent += `year: ${baziInfo.matchingYears[0]}\n`;
                    }
                    
                    // 完成代码块
                    codeBlockContent += `\`\`\``;
                    
                    // 替换选中的文本为代码块
                    editor.replaceSelection(codeBlockContent);
                    new Notice('八字已转换为代码块');
                } catch (error) {
                    // 如果解析失败，仅使用基本格式
                    editor.replaceSelection(`\`\`\`bazi
bazi: ${cleanedBazi}
\`\`\``);
                    new Notice('八字已转换为代码块');
                }
            } else {
                // 如果不符合格式，打开解析模态框让用户修改
                this.openBaziParserModal(selection, (baziInfo) => {
                    // 获取解析后的八字
                    const parsedBazi = `${baziInfo.yearPillar} ${baziInfo.monthPillar} ${baziInfo.dayPillar} ${baziInfo.hourPillar}`;
                    
                    // 构建代码块内容
                    let codeBlockContent = `\`\`\`bazi\nbazi: ${parsedBazi}\n`;
                    
                    // 添加性别参数
                    if (baziInfo.gender) {
                        const genderLabel = baziInfo.gender === '1' ? '男' : '女';
                        codeBlockContent += `gender: ${genderLabel}\n`;
                    }
                    
                    // 如果有指定年份，添加年份参数
                    if (baziInfo.matchingYears && baziInfo.matchingYears.length > 0 && baziInfo.matchingYears[0]) {
                        codeBlockContent += `year: ${baziInfo.matchingYears[0]}\n`;
                    }
                    
                    // 完成代码块
                    codeBlockContent += `\`\`\``;
                    
                    // 替换选中的文本为代码块
                    editor.replaceSelection(codeBlockContent);
                });
            }
        } else {
            new Notice('请先选择八字文本');
        }
    }
});
