import { Modal, Setting, Notice } from 'obsidian';
import { BaziService } from '../services/BaziService';
/**
 * 八字解析模态框
 */
export class BaziParserModal extends Modal {
    constructor(app, initialBazi = '', onParsed) {
        super(app);
        this.baziString = '';
        this.baziString = initialBazi;
        this.onParsed = onParsed;
    }
    onOpen() {
        const { contentEl } = this;
        contentEl.createEl('h2', { text: '解析八字' });
        // 说明文本
        contentEl.createEl('p', {
            text: '请输入八字，格式为"年柱 月柱 日柱 时柱"，如"甲子 乙丑 丙寅 丁卯"'
        });
        // 八字输入
        new Setting(contentEl)
            .setName('八字')
            .setDesc('输入完整八字')
            .addText(text => {
            text.setPlaceholder('甲子 乙丑 丙寅 丁卯')
                .setValue(this.baziString)
                .onChange(value => {
                this.baziString = value;
            });
        });
        // 错误信息区域
        const errorDiv = contentEl.createDiv({ cls: 'bazi-error-container' });
        errorDiv.hide();
        // 解析按钮
        new Setting(contentEl)
            .addButton(button => {
            button.setButtonText('解析八字')
                .setCta()
                .onClick(() => {
                try {
                    // 清除之前的错误信息
                    errorDiv.empty();
                    errorDiv.hide();
                    // 解析八字
                    const baziInfo = BaziService.parseBaziString(this.baziString);
                    // 调用回调函数
                    this.onParsed(baziInfo);
                    // 关闭模态框
                    this.close();
                    // 显示成功通知
                    new Notice('八字解析成功');
                }
                catch (error) {
                    console.error('解析八字出错:', error);
                    // 显示错误信息
                    errorDiv.setText(`错误: ${error.message}`);
                    errorDiv.show();
                }
            });
        });
    }
    onClose() {
        const { contentEl } = this;
        contentEl.empty();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmF6aVBhcnNlck1vZGFsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiQmF6aVBhcnNlck1vZGFsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBTyxLQUFLLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUN2RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFdEQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sZUFBZ0IsU0FBUSxLQUFLO0lBSXhDLFlBQVksR0FBUSxFQUFFLGNBQXNCLEVBQUUsRUFBRSxRQUFpQztRQUMvRSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFKTCxlQUFVLEdBQVcsRUFBRSxDQUFDO1FBSzlCLElBQUksQ0FBQyxVQUFVLEdBQUcsV0FBVyxDQUFDO1FBQzlCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQzNCLENBQUM7SUFFRCxNQUFNO1FBQ0osTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLElBQUksQ0FBQztRQUUzQixTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBRTNDLE9BQU87UUFDUCxTQUFTLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRTtZQUN0QixJQUFJLEVBQUUsdUNBQXVDO1NBQzlDLENBQUMsQ0FBQztRQUVILE9BQU87UUFDUCxJQUFJLE9BQU8sQ0FBQyxTQUFTLENBQUM7YUFDbkIsT0FBTyxDQUFDLElBQUksQ0FBQzthQUNiLE9BQU8sQ0FBQyxRQUFRLENBQUM7YUFDakIsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ2QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUM7aUJBQy9CLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO2lCQUN6QixRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ2hCLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO1lBQzFCLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDLENBQUM7UUFFTCxTQUFTO1FBQ1QsTUFBTSxRQUFRLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxzQkFBc0IsRUFBRSxDQUFDLENBQUM7UUFDdEUsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1FBRWhCLE9BQU87UUFDUCxJQUFJLE9BQU8sQ0FBQyxTQUFTLENBQUM7YUFDbkIsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ2xCLE1BQU0sQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDO2lCQUN6QixNQUFNLEVBQUU7aUJBQ1IsT0FBTyxDQUFDLEdBQUcsRUFBRTtnQkFDWixJQUFJO29CQUNGLFlBQVk7b0JBQ1osUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDO29CQUNqQixRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7b0JBRWhCLE9BQU87b0JBQ1AsTUFBTSxRQUFRLEdBQUcsV0FBVyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7b0JBRTlELFNBQVM7b0JBQ1QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztvQkFFeEIsUUFBUTtvQkFDUixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7b0JBRWIsU0FBUztvQkFDVCxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztpQkFDdEI7Z0JBQUMsT0FBTyxLQUFLLEVBQUU7b0JBQ2QsT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7b0JBRWhDLFNBQVM7b0JBQ1QsUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO29CQUN6QyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7aUJBQ2pCO1lBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxPQUFPO1FBQ0wsTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLElBQUksQ0FBQztRQUMzQixTQUFTLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDcEIsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwLCBNb2RhbCwgU2V0dGluZywgTm90aWNlIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgQmF6aVNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9CYXppU2VydmljZSc7XG5cbi8qKlxuICog5YWr5a2X6Kej5p6Q5qih5oCB5qGGXG4gKi9cbmV4cG9ydCBjbGFzcyBCYXppUGFyc2VyTW9kYWwgZXh0ZW5kcyBNb2RhbCB7XG4gIHByaXZhdGUgYmF6aVN0cmluZzogc3RyaW5nID0gJyc7XG4gIHByaXZhdGUgb25QYXJzZWQ6IChiYXppSW5mbzogYW55KSA9PiB2b2lkO1xuXG4gIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBpbml0aWFsQmF6aTogc3RyaW5nID0gJycsIG9uUGFyc2VkOiAoYmF6aUluZm86IGFueSkgPT4gdm9pZCkge1xuICAgIHN1cGVyKGFwcCk7XG4gICAgdGhpcy5iYXppU3RyaW5nID0gaW5pdGlhbEJhemk7XG4gICAgdGhpcy5vblBhcnNlZCA9IG9uUGFyc2VkO1xuICB9XG5cbiAgb25PcGVuKCkge1xuICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xuICAgIFxuICAgIGNvbnRlbnRFbC5jcmVhdGVFbCgnaDInLCB7IHRleHQ6ICfop6PmnpDlhavlrZcnIH0pO1xuICAgIFxuICAgIC8vIOivtOaYjuaWh+acrFxuICAgIGNvbnRlbnRFbC5jcmVhdGVFbCgncCcsIHsgXG4gICAgICB0ZXh0OiAn6K+36L6T5YWl5YWr5a2X77yM5qC85byP5Li6XCLlubTmn7Eg5pyI5p+xIOaXpeafsSDml7bmn7FcIu+8jOWmglwi55Sy5a2QIOS5meS4kSDkuJnlr4Ug5LiB5Y2vXCInIFxuICAgIH0pO1xuXG4gICAgLy8g5YWr5a2X6L6T5YWlXG4gICAgbmV3IFNldHRpbmcoY29udGVudEVsKVxuICAgICAgLnNldE5hbWUoJ+WFq+WtlycpXG4gICAgICAuc2V0RGVzYygn6L6T5YWl5a6M5pW05YWr5a2XJylcbiAgICAgIC5hZGRUZXh0KHRleHQgPT4ge1xuICAgICAgICB0ZXh0LnNldFBsYWNlaG9sZGVyKCfnlLLlrZAg5LmZ5LiRIOS4meWvhSDkuIHlja8nKVxuICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLmJhemlTdHJpbmcpXG4gICAgICAgICAgLm9uQ2hhbmdlKHZhbHVlID0+IHtcbiAgICAgICAgICAgIHRoaXMuYmF6aVN0cmluZyA9IHZhbHVlO1xuICAgICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAvLyDplJnor6/kv6Hmga/ljLrln59cbiAgICBjb25zdCBlcnJvckRpdiA9IGNvbnRlbnRFbC5jcmVhdGVEaXYoeyBjbHM6ICdiYXppLWVycm9yLWNvbnRhaW5lcicgfSk7XG4gICAgZXJyb3JEaXYuaGlkZSgpO1xuXG4gICAgLy8g6Kej5p6Q5oyJ6ZKuXG4gICAgbmV3IFNldHRpbmcoY29udGVudEVsKVxuICAgICAgLmFkZEJ1dHRvbihidXR0b24gPT4ge1xuICAgICAgICBidXR0b24uc2V0QnV0dG9uVGV4dCgn6Kej5p6Q5YWr5a2XJylcbiAgICAgICAgICAuc2V0Q3RhKClcbiAgICAgICAgICAub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAvLyDmuIXpmaTkuYvliY3nmoTplJnor6/kv6Hmga9cbiAgICAgICAgICAgICAgZXJyb3JEaXYuZW1wdHkoKTtcbiAgICAgICAgICAgICAgZXJyb3JEaXYuaGlkZSgpO1xuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgLy8g6Kej5p6Q5YWr5a2XXG4gICAgICAgICAgICAgIGNvbnN0IGJhemlJbmZvID0gQmF6aVNlcnZpY2UucGFyc2VCYXppU3RyaW5nKHRoaXMuYmF6aVN0cmluZyk7XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAvLyDosIPnlKjlm57osIPlh73mlbBcbiAgICAgICAgICAgICAgdGhpcy5vblBhcnNlZChiYXppSW5mbyk7XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAvLyDlhbPpl63mqKHmgIHmoYZcbiAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgLy8g5pi+56S65oiQ5Yqf6YCa55+lXG4gICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ+WFq+Wtl+ino+aekOaIkOWKnycpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcign6Kej5p6Q5YWr5a2X5Ye66ZSZOicsIGVycm9yKTtcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIC8vIOaYvuekuumUmeivr+S/oeaBr1xuICAgICAgICAgICAgICBlcnJvckRpdi5zZXRUZXh0KGDplJnor686ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICAgICAgICAgICAgZXJyb3JEaXYuc2hvdygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgfSk7XG4gIH1cblxuICBvbkNsb3NlKCkge1xuICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xuICAgIGNvbnRlbnRFbC5lbXB0eSgpO1xuICB9XG59XG4iXX0=